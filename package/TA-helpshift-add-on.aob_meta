{"basic_builder": {"appname": "TA-helpshift-add-on", "friendly_name": "HelpShift Add On", "version": "1.1.0", "author": "David Connett", "description": "TA that allows Pull-based ingestion from the HelpShift API.", "theme": "#65A637", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAstJREFUWEftl2tIFFEYht8xQ6Lob17QP4J3BUlbS6yttUwilxRqRTEyWqgszIoyMKkwCjUyy9AKo8RCk7RMU9tdV1LUMYrY9hJSYLqzRRbVWknuTMykpTm7h1aCgjk/5/vOOe95vvdchuI4jsM/1ChJEKEaEiGSXSVCEiESAVJc8pBEiESAFBf1kMFkQURosNO+Vttr+HovcRrn7+uULdm4W1c9mcPhQWc3EuXxUGxUgbHZkBAfh8qzp2eNISro8VMDoqMinE74asQKfz9fl4KSUjPQfrtWyOEFtmq6kKxYiXCZAsZ+LfgnBiUygpuCGPj7+TgV9NH+GXn5R3G5vGRGDi8sMFKGF4Z+hMTIYaJ1oKiZskQFVV69gffvRmEZfInqilKUXbyEsbEvaG3rQFf7HQxbGWSp9yJNuQHm54M4X1KEw4Wn0NzWAdbhwJj9EwKDgsBYbThTVACD2YLIsFDk5h8TsFCTLzD+JWYe0M0Q7ZIQvyKOdaCrh4Y8YbmAvrvvEQICfOHn4415lIfwbWiEgXrPQSiTE7FLvQ3hstV48rAdX8fHsT3nABwOFjVVZVBl78b1qnNYvGghgmPlsAzo/9xD/Co+2O1Y4OUldJ7v6YlhG/NTEDgObVo9khRypGzeipil0bh5qwlGWoeeXhqtGj0amlrwrE+DhPWp0N2rB+uYwKZMNVrqr7khCMDx4jIU7M9BTV0jslRpGLJacbKkHBXFJ5CxIxe1V8qhUKaDY1kUHtqHnXlHBH9099K4r+lEQ2MzjLQeIbFrYKa1ePN2FOuU6YiPi8WF0iJyycTcypdmyoC8BThwghd+mZLjYc0y6fSxQmNWwSRSpuk5bt1lU38FYtvW+VnAImyZQiilq+aWIPbH4QKP37asq4m+TUwgasVamPr/giDS8T+XuFuE5jIhqa8kSCJEIkCKSx6SCJEIkOKSh/47Qt8BQMeipH4B1QgAAAAASUVORK5CYII=", "visible": true, "tab_version": "4.1.0", "tab_build_no": "0", "build_no": 2}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "helpshift", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "helpshift", "title": "helpshift", "description": "", "type": "customized", "parameters": [{"name": "date", "label": "Date", "help_string": "Place the date for the last event you want to start indexing from.", "required": false, "format_type": "text", "default_value": "<yyyy/mm/dd>", "placeholder": "", "type": "text", "value": "09/17/1988"}], "data_inputs_options": [{"type": "customized_var", "name": "date", "title": "Date", "description": "Place the date for the last event you want to start indexing from.", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "<yyyy/mm/dd>", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # date = definition.parameters.get('date', None)\n    pass\n\ndef collect_events(helper, ew):\n    global_helpshift_domain = helper.get_global_setting(\"helpshift_domain\")\n    global_api_token = helper.get_global_setting(\"api_token\")\n    \n    print(global_helpshift_domain)\n    print(global_api_token)\n    \n    #helper.set_log_level(\"debug\")\n    helper.log_debug(global_helpshift_domain)\n    helper.log_debug(global_api_token)\n\n    \n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_date = helper.get_arg('date')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_date = helper.get_arg('date', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_helpshift_domainn = helper.get_global_setting(\"helpshift_domainn\")\n    global_api_token = helper.get_global_setting(\"api_token\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "customized_options": [{"name": "date", "value": "09/17/1988"}], "uuid": "0d209bf73ef14130b7136730ba49e42c", "sample_count": 0}]}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": [], "customized_settings": [{"required": false, "name": "helpshift_domain", "label": "Helpshift Domain", "default_value": "", "placeholder": "", "help_string": "", "type": "text", "format_type": "text", "value": "mobilityware"}, {"required": false, "name": "api_token", "label": "API Token", "placeholder": "", "default_value": "", "help_string": "", "type": "password", "format_type": "password", "value": ""}]}}, "sourcetype_builder": {"HelpShift_Issues": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}, "helpshift": {"metadata": {"event_count": 0, "data_input_name": "helpshift", "extractions_count": 0, "cims_count": 0}}}, "validation": {}}