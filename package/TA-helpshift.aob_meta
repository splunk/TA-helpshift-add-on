{"basic_builder": {"appname": "TA-helpshift", "friendly_name": "HelpShift", "version": "1.0.0", "author": "David Connett", "description": "This is an app that allows consuming REST data from HelpShift.", "theme": "#65A637", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAJKADAAQAAAABAAAAJAAAAAAqDuP8AAAErElEQVRYCeVXD0xVVRj/3oX3HljTngKt1Rz+4RUqSx9QRsGDQQp7mYXKxuaU5lqu1YItMi1Ze5tu0VqD2FQsmzmVlX9CWrAkmbGFiwajZW2MFFwoKdIe7/F4f7mdc947H/fde3lyN+/W1tnuO7/v9/053zv3nPOdC6fPXhD1aJNuj+isb4wbOhwOi0/kFIpNR4+jHaRk5KBwP4Fj6w42mDzmhs2VSNFk+MNJAXRqI3+NQiAYUkS/MXpLwUkJ3RJyT01DIBSbUCAYxLFD4TDDf/R2waTXh3wiovsMks0mWLtmVUxUk9GI8qHPTyAevdqDWLcZoiNsLLHjQBzQGaHto8ZmCIdnOI29bjNER1ifY8OB5IDO4IJkM9IiQQby6DpD1ozlOKAcCIIBSorykV6VW8SwrgkJQvzwjg3FmBAH8T24lU796kwri3zz1hiOoHtC3unZLY2jRkFqyhKG+gZ+QxVLKO/5lyCTvMPa/QdQ0XGxi3Hri19EjoLBoWtATlemkypKt1Uxbu1zpUifaDkL2QVl4Kh4hXHWbDs0H2+B3MIXmPxU0Saw5ZfBPmc9kykvmIyJkJqWBnQ7ftvRicFq9jkZZ7E8hBwFmyt3QfuZL+H3ny/Bo2vyUDcyPMKw3+9H7uDHTQxfuz7M+gSyptKWWMAzNcVkt8cD0z4fBKMHJuWFhQuSoPVkMzOoe+ct1tMffl7QwU9+dQ55CpalLwWDwQAPkq0rbac+a5SKqjjX9mQML9L9Lm3pWXm8rmFfs/cDxBRYbXaUy3e+jpjMBmJaJGnzRTkqnzrTyjiuo/3MzEwMRwXKv1t3gPGCxxeQ5kcKYhDaOn6I4eiZwRuddt5MJhOEZPXKTDjeKrfErj/K05lVa1tfjqyr2ehRq4Ffr0JiQkKMD/lXKEuTo2RnVzfqLrRfRKwVZFozmIsioSmvlylGb44Bf8gszxm/vuEw6vbUHUSsFSQlRcrInLXM7qhQjSlfhLfH7zK7MMk5gbyNoT+vw8oVy1R945H8VFckZIxeEYb6f1T1ly+BEvuzzG7wl8i55aiogsvffa3qOx9S8crm4yS1eX9PNYpGsqDpPz0iueugcp5AkRA9pObaCWoxUxZbkO75/jzDl7p7IKRy1+GGY7fvcKjoFQlRi7aWYwpDTvB3TeWybTsZfaW3j/VZBZGte2fiH9X7NDMiP9+0tXMY07vcbuV9iK6hFcvTQVrDPj08m2B//wAGGR6+wfCO3TXweHYhmAURFi1aCCFyuX/k4VS0k4NPDn0B8s1Ba6nzwwZQLGru/Pf4BOx6423o/qkXBvsucxrSlz4GK2128AcCcPpoA+MXWyzgcrkYvtLZyorvM7nrmEyOX/TlwOvzg5nUUHl7wJgMtLCxI1vtJ3/jFnH87kSM6rXqvWLte072SBWl5dvFpiPHGDXpdktVomsyIvOelorVTxejTdXuarF8+6tMJlOnrb1Zu1+bg4o1Taho0+wHo9REdVHLp1IqhyVlRMprxeuyMlVdNCckyE9G1bD3JstUPpGol+aEgqHIF+e9h4xvUVJUoGqgOSF6w9SzaU6If5PrlZTmhASDZhdNuWuO/p+bof/dGvoXc+Oj/9TCUNgAAAAASUVORK5CYII=", "visible": false, "tab_version": "4.1.0", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "helpshift_issues", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "helpshift_issues", "title": "helpshift_issues", "description": "Get issues from HelpShift.", "type": "customized", "parameters": [{"name": "start_date", "label": "Start Date", "help_string": "Date you want to start collecting events from. Leave blank to start collection of all events.", "required": false, "format_type": "text", "default_value": "", "placeholder": "<mm/dd/yyyy>", "type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "start_date", "title": "Start Date", "description": "Date you want to start collecting events from. Leave blank to start collection of all events.", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": "<mm/dd/yyyy>"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # start_date = definition.parameters.get('start_date', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_start_date = helper.get_arg('start_date')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_start_date = helper.get_arg('start_date', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_userdefined_global_var = helper.get_global_setting(\"userdefined_global_var\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "customized_options": [{"name": "start_date", "value": ""}], "uuid": "1b95f373c22d45bd961e9b2486273810"}]}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"issues": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}, "helpshift-issues": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}, "helpshift_issues": {"metadata": {"event_count": 0, "data_input_name": "helpshift_issues", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation"], "status": "job_started", "validation_id": "v_1647464480_79"}}